{-# LANGUAGE OverloadedStrings #-}

module HsDev.Database.SQLite.Schema (
	schema, commands
	) where

import qualified Data.Text as T
import Data.String
import Database.SQLite.Simple (Query)

schema :: T.Text
schema = T.unlines [
	"pragma case_sensitive_like = true;",
	"",
	"create table package_dbs (",
	"\tpackage_db text, -- global, user or path",
	"\tpackage_name text,",
	"\tpackage_version text",
	");",
	"",
	"create view latest_packages (",
	"\tpackage_db,",
	"\tpackage_name,",
	"\tpackage_version",
	") as",
	"select package_db, package_name, max(package_version)",
	"from package_dbs",
	"group by package_db, package_name;",
	"",
	"create table projects (",
	"\tid integer primary key autoincrement,",
	"\tname text,",
	"\tcabal text,",
	"\tversion text,",
	"\tpackage_db_stack json -- list of package-db",
	");",
	"",
	"create unique index projects_id_index on projects (id);",
	"",
	"create table libraries (",
	"\tproject_id integer,",
	"\tmodules json, -- list of modules",
	"\tbuild_info_id integer",
	");",
	"",
	"create table executables (",
	"\tproject_id integer,",
	"\tname text,",
	"\tpath text,",
	"\tbuild_info_id integer",
	");",
	"",
	"create table tests (",
	"\tproject_id integer,",
	"\tname text,",
	"\tenabled integer,",
	"\tmain text,",
	"\tbuild_info_id integer",
	");",
	"",
	"create view targets (",
	"\tproject_id,",
	"\tbuild_info_id",
	") as",
	"select project_id, build_info_id from libraries",
	"union",
	"select project_id, build_info_id from executables",
	"union",
	"select project_id, build_info_id from tests;",
	"",
	"create table build_infos(",
	"\tid integer primary key autoincrement,",
	"\tdepends json, -- list of dependencies",
	"\tlanguage text,",
	"\textensions json, -- list of extensions",
	"\tghc_options json, -- list of ghc-options",
	"\tsource_dirs json, -- list of source directories",
	"\tother_modules json -- list of other modules",
	");",
	"",
	"create view projects_deps (",
	"\tproject_id,",
	"\tpackage_name,",
	"\tpackage_version",
	") as",
	"select distinct p.id, deps.value, ps.package_version",
	"from projects as p, build_infos as b, json_each(b.depends) as deps, targets as t, latest_packages as ps",
	"where (p.id == t.project_id) and (b.id == t.build_info_id) and (deps.value <> p.name) and (ps.package_name == deps.value);",
	"",
	"create view projects_modules_scope (",
	"\tproject_id,",
	"\tmodule_id",
	") as",
	"select pdbs.project_id, m.id",
	"from projects_deps as pdbs, modules as m",
	"where (m.package_name == pdbs.package_name) and (m.package_version == pdbs.package_version)",
	"union",
	"select p.id, m.id",
	"from projects as p, modules as m",
	"where (m.cabal == p.cabal);",
	"",
	"create unique index build_infos_id_index on build_infos (id);",
	"",
	"create table symbols (",
	"\tid integer primary key autoincrement,",
	"\tname text,",
	"\tmodule_id integer,",
	"\tdocs text,",
	"\tline integer,",
	"\tcolumn integer,",
	"\twhat text, -- kind of symbol: function, method, ...",
	"\ttype text,",
	"\tparent text,",
	"\tconstructors json, -- list of constructors for selector",
	"\targs json, -- list of arguments for types",
	"\tcontext json, -- list of contexts for types",
	"\tassociate text, -- associates for families",
	"\tpat_type text,",
	"\tpat_constructor text",
	");",
	"",
	"create unique index symbols_id_index on symbols (id);",
	"create index symbols_module_id_index on symbols (module_id);",
	"create index symbols_name_index on symbols (name);",
	"",
	"create table modules (",
	"\tid integer primary key autoincrement,",
	"\tfile text,",
	"\tcabal text,",
	"\t-- project_id integer,",
	"\tinstall_dirs json, -- list of paths",
	"\tpackage_name text,",
	"\tpackage_version text,",
	"\tother_location text,",
	"",
	"\tname text,",
	"\tdocs text,",
	"\tfixities json, -- list of fixities",
	"\ttag json,",
	"\tinspection_error text",
	");",
	"",
	"create unique index modules_id_index on modules (id);",
	"create index modules_name_index on modules (name);",
	"",
	"create table exports (",
	"\tmodule_id integer,",
	"\tsymbol_id integer",
	");",
	"",
	"create table scopes (",
	"\tmodule_id integer,",
	"\tqualifier text,",
	"\tname text,",
	"\tsymbol_id integer",
	");",
	"",
	"create view completions (",
	"\tmodule_id,",
	"\tcompletion,",
	"\tsymbol_id",
	") as",
	"select id, (case when sc.qualifier is null then sc.name else sc.qualifier || '.' || sc.name end) as full_name, sc.symbol_id",
	"from modules as m, scopes as sc",
	"where (m.id == sc.module_id);",
	"",
	"create table names (",
	"\tmodule_id integer,",
	"\tqualifier text,",
	"\tname text,",
	"\tline integer,",
	"\tcolumn integer,",
	"\tline_to integer,",
	"\tcolumn_to integer,",
	"\tdef_line integer,",
	"\tdef_column integer,",
	"\tresolved_module text,",
	"\tresolved_name text,",
	"\tresolve_error text",
	");"]

commands :: [Query]
commands =
	map (fromString . T.unpack) $
	filter (not . T.null) $
	map T.strip $ T.splitOn ";" schema